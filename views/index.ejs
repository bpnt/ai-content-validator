<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Content Validator</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
            padding: 2rem 0;
            box-sizing: border-box;
        }
        .container {
            background-color: rgba(255, 255, 255, 0.9);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            width: 100%;
            margin: auto;
        }
        h1 {
            color: #333;
            margin-bottom: 1.5rem;
            text-align: center;
            font-weight: 600;
            font-size: 2.5rem;
        }
        h2 {
            color: #555;
            margin-bottom: 0.75rem;
            font-weight: 400;
            font-size: 1.2rem;
        }
        input[type="text"] {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        input[type="text"]:focus {
            outline: none;
            border-color: #23a6d5;
        }
        .button-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        button {
            background-color: #23a6d5;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-size: 1rem;
            font-weight: 600;
            flex: 1;
        }
        button:hover {
            background-color: #1c8ab1;
        }
        #result, #analysisResult {
            margin-top: 1.5rem;
            padding: 1rem;
            background-color: #f8f8f8;
            border-radius: 8px;
            max-height: 300px;
            overflow-y: auto;
            border: 2px solid #eee;
            display: none;
            position: relative; /* Added for loading indicator */
        }
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.2rem;
            color: #23a6d5;
            display: none; /* Initially hidden */
        }
        .error {
            color: #e74c3c;
        }
        .suggestion {
            color: #2ecc71;
        }
        .bubbles {
            position: fixed;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
            top: 0;
            left: 0;
        }
        .bubble {
            position: absolute;
            bottom: -100px;
            width: 40px;
            height: 40px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            opacity: 0.5;
            animation: rise 10s infinite ease-in;
        }
        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        @keyframes rise {
            0% {
                bottom: -100px;
                transform: translateX(0);
            }
            100% {
                bottom: 1080px;
                transform: translateX(100px);
            }
        }
        #result {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            max-height: 300px;
            overflow-y: auto;
            background-color: #f9f9f9;
            font-family: Arial, sans-serif;
            line-height: 1.6;
        }
        #result h2 {
            margin-top: 0;
            color: #333;
        }
        #scrapedContent {
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        #analysisResult {
            display: none;
            border: 1px solid #ccc;
            padding: 10px;
            margin-top: 20px;
            max-height: 300px; /* Ensure it doesn't overflow */
            overflow-y: auto; /* Allow scrolling */
        }
    </style>
</head>
<body>
    <div class="bubbles" id="bubbles-container">
        <!-- Bubbles will be added here dynamically -->
    </div>
    <div class="container">
        <h1>Content Validator</h1>
        <input type="text" id="urlInput" placeholder="Enter URL to scrape">
        <div class="button-container">
            <button id="scrapeButton">Scrape</button>
            <button id="analyzeButton" style="display: none;">Analyze</button>
        </div>
        <div id="result">
            <h2>Scraped Content:</h2>
            <div id="scrapedContent"></div>
            <div class="loading" id="scrapeLoadingIndicator">LOADING...</div> <!-- Loading indicator for scraping -->
        </div>
        <div id="analysisResult">
            <h2>Analysis Result</h2>
            <pre id="resultContent"></pre>
            <div class="loading" id="loadingIndicator">LOADING...</div> <!-- Loading indicator for analysis -->
        </div>
    </div>

    <script>
        // Bubble creation script
        function createBubbles() {
            const container = document.getElementById('bubbles-container');
            for (let i = 0; i < 20; i++) {
                const bubble = document.createElement('div');
                bubble.className = 'bubble';
                bubble.style.left = `${Math.random() * 100}%`;
                bubble.style.animationDuration = `${5 + Math.random() * 10}s`;
                bubble.style.animationDelay = `${Math.random() * 5}s`;
                container.appendChild(bubble);
            }
        }

        window.addEventListener('load', createBubbles);

        const urlInput = document.getElementById('urlInput');
        const scrapeButton = document.getElementById('scrapeButton');
        const analyzeButton = document.getElementById('analyzeButton');
        const resultDiv = document.getElementById('result');
        const scrapedContentDiv = document.getElementById('scrapedContent');
        const analysisResultDiv = document.getElementById('analysisResult');
        const resultContentDiv = document.getElementById('resultContent');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const scrapeLoadingIndicator = document.getElementById('scrapeLoadingIndicator');

        let scrapedContent = '';

        scrapeButton.addEventListener('click', async () => {
            const url = urlInput.value;
            if (!url) {
                alert('Please enter a URL');
                return;
            }

            try {
                scrapedContentDiv.textContent = ''; // Clear previous content
                scrapeLoadingIndicator.style.display = 'block'; // Show loading indicator
                const response = await fetch('/scrape', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url }),
                });
                const data = await response.json();
                if (data.error) {
                    scrapedContentDiv.textContent = `Error: ${data.error}`;
                } else {
                    scrapedContent = data.content;
                    scrapedContentDiv.textContent = scrapedContent;
                    resultDiv.style.display = 'block';
                    analyzeButton.style.display = 'block';
                }
            } catch (error) {
                scrapedContentDiv.textContent = `Error: ${error.message}`;
            } finally {
                scrapeLoadingIndicator.style.display = 'none'; // Hide loading indicator
            }
        });

        analyzeButton.addEventListener('click', async () => {
            if (!scrapedContent) {
                alert('Please scrape content first');
                return;
            }

            try {
                resultContentDiv.textContent = ''; // Clear previous results
                loadingIndicator.style.display = 'block'; // Show loading indicator
                const response = await fetch('/analyze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content: scrapedContent }),
                });
                const data = await response.json();
                resultContentDiv.textContent = JSON.stringify(data, null, 2);
                analysisResultDiv.style.display = 'block';
            } catch (error) {
                resultContentDiv.textContent = `Error: ${error.message}`;
            } finally {
                loadingIndicator.style.display = 'none'; // Hide loading indicator
            }
        });
    </script>
</body>
</html>
